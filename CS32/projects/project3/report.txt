Aaron Chien
405498016


class Board
{
    public: 
        Board(int nHoles, int nInitialBeansPerHole);
        int holes() const;
        int beans(Side s, int hole) const;
        int beansInPlay(Side s) const;
        int totalBeans() const;
        bool sow(Side s, int hole, Side& endSide, int& endHole);
        // recursive helper function for sow
        bool moveToPot(Side s, int hole, Side potOwner);
        bool setBeans(Side s, int hole, int beans);
    private:
        void helpSow(Side s, Side opp, int hole, int remain, Side& endSide, int &endHole);
* helper function used for the sow function where it would check for remaining beans and sow the beans, this uses a recursive call and ends when the remaining is 0
* the opp is also there as a guard to ensure that we will not add a bean to the other side’s pot
* there are also cases to check for running out of space and needing to move to the head of the vector
        int m_holes;
* the number of holes in the board
        int m_initialBeans;
* the amount of initial beans per hole 
        std::vector <int> m_north;
* data structure used to represent the north side, a vector is used here where pot is represented by index 0
        std::vector <int> m_south;
* data structure used to represent the south side, a vector is used here where pot is represented by index 0 
};


class Game
{
    public:
        Game(const Board& b, Player* south, Player* north);
        void display() const;
        void status(bool& over, bool& hasWinner, Side& winner) const;
        bool move(Side s);
        void play();
        int beans(Side s, int hole) const;
    private:
        bool helpMove(int& chooseHole, Side current, Side opp, Side& endSide, int& endHole, Player* player);
* helper function for move in which it would ensure that moves would finish by checking for additional moves if the endSide and endHole meet the right conditions (current and endside are the same and endHole is 0)
* Side opp is there to represent the opposing side and is used in cases of no beans in our side, in which the game ends and we need to move every bean from the opposing side into their respective holes 
* player is mainly there for display functions for when the game ends, when we have another move, and captures
* a capture here would be checked for when the endHole is not 0, the current endSide and current side are the same, the beans at that hole is 1, meaning that it was 0 a moment before, and the opposing side is not 0, then move the beans at that hole and the other hole will be moved to our current pot
        Board m_board;
* uses board from the previous board class in order to manipulate the board itself during the gameplay and to also keep track of where the game status is as the game continues 
        Player* s_player;
* Player member for the south player, used to represent the SOUTH side
        Player* n_player;
* Player member for the north player, used to represent the NORTH side 
};


class Player
{
    public:
        Player(std::string name);
        std::string name() const;
        virtual bool isInteractive() const;
        virtual int chooseMove(const Board& b, Side s) const = 0;
* making a player a pure virtual function 
        virtual ~Player();
    private:
        std::string m_name;
* private member variable for name
};


class HumanPlayer: public Player
{
    public:
        HumanPlayer(std::string name);
        virtual ~HumanPlayer();
        virtual bool isInteractive() const;
        virtual int chooseMove(const Board& b, Side s) const;
* have the function performed qualitative checks such as if the hole was viable or in range
* also check first if there are no beans to sow, if so, return -1
};


class BadPlayer: public Player
{
    public:
        BadPlayer(std::string name);
        virtual ~BadPlayer();
        virtual bool isInteractive() const;
        virtual int chooseMove(const Board& b, Side s) const;
* if there are no beans to sow, return -1
* else just choose the first hole from 1 to the end that has a bean
};


class SmartPlayer: public Player
{
    public:
        SmartPlayer(std::string name);
        virtual ~SmartPlayer();
        virtual bool isInteractive() const;
        virtual int chooseMove(const Board& b, Side s) const;


    private:
        void helpChooseMove(Side s, Side original, int depth, const Board& b, int currentHole, int& currentValue, int& bestHole, int bestValue) const;
* this private member member is the helper function for chooseMove, it details a recursive function to find the most move
* it contains the depth, how far we should look into the node trees
* this recursion function would loop into the number of depths to look at, examine that depth unless the game is finished (which is a base case in which it will immediately returned)
* the original argument serves as the argument to examine the values at depth and as well as a variable to flip between the current side and the opposite side, in our function, we create a new variable called Side opp in which the opposite side of s would occupy
* the original as well would then determine if we are maximizing or minimizing, if it is the same as s, we are maximizing, if it is the opposite, we are minimizing since we want to act in our own self interest in which the minimum of our opponent is our maximum 
* the currentHole and currentValue keeps track of it, the bestHole and bestValue changes depending on the current hole and current value
* when first initialized, the bestValue would either be negative infinity (if we are maximizing) or positive infinity (if we are minimizing) in order to have some value
* base on the currentValue and currentHole, this would change and when it changes, it means we found a new minimum value or new maximum value and in which it would take the place of the current Hole for the best Hole to be returned 
        void helpCheckCaptures(Side current, Side opp, Side& endSide, int& endHole, Board& b) const;
* this helper function is mainly here to have our helpChooseMove be less cluttered in which it would simply check, at the current position, if we are in a case of a capture and if we are, perform it 
        int eval(Side s, const Board& b) const;
* this evaluation function is there to determine the status of the game at depth or when it finishes
* if we reach the depth, we would simply take the difference in our pot and the opposing pot and return that value
* if the game is finished, if we have won, we would return infinity, if the opposing side has won, we would return negative infinity, and if there is a tie, then it would return 0 
};


Description for SmartPlayer::choseMove
* this function would take in the board and the side to examine
* if there are no beans to sow on the current side, return -1, otherwise initialize these variables:
   * s for the current side
   * s for the original side
   * 1 for the depth 
   * b for the current board
   * a variable for the current hole
   * a value for the current value of the “nodes”
   * a variable for the best hole
   * a value for best current value of the “nodes”
* using these variables, pass it into the helper function called helpChooseMove (pseudocode will be provided)
* helpChooseMove basically performs the recursive call of checking each depth up to a certain number, simultaneously updating the currentvalue and besthole in order to return the best move for the AI player to make
* the heuristics I choose were that if the game was over due to someone winning or a tie, if the player won, that would give an amount of infinity represented by INT_MAX, else if the player lost, that would given an amount of negative infinity represented by INT_MIN, else if there was a tie, that would be represented by a 0
* the other heuristic I used was that if the timer ran out to search the branches, you would simply just take the number of beans you had in the current pot subtracted by the opponent’s pot. 


PseudoCode:
void helpSow(Side s, Side opp, int hole, int remain, Side& endSide, int &endHole);
{
    if the remaining beans are less than or equal to 0
        if the current side is North, increment the current hole, set endSide to NORTH and endHole to hole, return
        if the current side is SOUTH, do the same but set endSide to SOUTH instead 
    if the current side is NORTH
        if the hole is below 0 and the remaining beans is not 0, switch over to the other side by calling helpSow again, but on the SOUTH side and at hole 1
        else if the hole is above 0 and the remaining beans is not 0, if we are at the pot and we are the NORTH player, add 1 to the pot, decrement remaining and switch to the SOUTH side at hole 1
        else if the hole is 0 and we are the SOUTH player, switch to the other side at hole 1 without changing the pot
        else increment the current hole, decrement remaining and hole, and call the function again to continue 
   if the current side is SOUTH, we are doing the same, but a little differently 
        if the hole is greater than the number of holes and the remaining is not 0, and we reached beyond the amount of holes on the SOUTH side as the SOUTH player, increment the SOUTH pot, decrement remaining and switch over to the NORTH side
        else if the hole is just greater than the total number of holes plus 1, just switch over to the NORTH side at the end of their side
         if the hole is less than the total number of holes and remaining beans is not 0, increment the current hole by 1, decrementing remaining, increment hole to travel to the next hole when you call helpSow again for the SOUTH side


void SmartPlayer::helpChooseMove(Side s, Side original, int depth, const Board& b, int currentHole, int& currentValue, int& bestHole, int bestValue) const
{
        initialize all the important variables first such as the two sides (one to keep track of side
when sowed called endSide and one to keep track of the opponent called opp)


create an int variable called endHole, this variable will be used to determine the ending
hole from sowing


if the current side is NORTH, then opp is SOUTH, otherwise if the current side is
SOUTH, then opp is NORTH


then check the recursive base case functions:
if the current side has no more beans, then move all the beans on the other side to their
own pot, and evaluate


if the limeLimit is 0 (or close to 0), stop the recursive call and evaluate the current position, then return 


create a for loop that for every available hole we can choose from, 
then start a timer for the time that has elapsed into into a double variable called startTime
create a copy of the board and sow the copy 
if the conditions to be sowed again are satisfied, recursively call the function again to check every possible move we can make
afterwards call the capture function to check for capture conditions and implement them into the copy of the board
before going into the branch again, take the difference between the time elapsed and the start time and put it as the new timelimit
if the original and the side are the same, then we would be maximizing whatever the function returns, so we set best value to negative infinity and recursively call the function again, if the current value of that function is greater or equal to the best value, make the best hole the current hole and the best value the current value to keep track


else if the original and the side are the opposite, then we would be minimizing whatever the function returns, so we set best value to infinity and recursively call the function again, if the current value of that function is less than or equal to the best value, then make the best hole the current hole and the best value the current value to keep track 


return
}


void helpCheckCaptures(Side current, Side opp, Side& endSide, int& endHole, Board& b) const
{
        if the current variable and the endSide variable are the same and the ending hole’s bean is 1, meaning that it was 0 monetarily before, and the opposing side is not 0
                move the current side and the ending hole to the current side’s pot
                move the opposing side and the ending hole to the current side’s pot 
}


int SmartPlayer::eval(Side s, const Board& b) const
{
        if the s is NORTH, take the current board and if the game is not over, return the difference in beans from the NORTH and SOUTH pot 
        else (the game has ended)
        if the number of beans in the NORTH pot is the most, return infinity
        else if the number of beans in the SOUTH pot is the most, return negative infinity
        else overall if the number of beans in the NORTH and SOUTH are the same, return 0


        else if the s is SOUTH, take the current board and if the game is not over, return the difference in beans from the SOUTH and NORTH pot
        else (the game has ended)
        if  the number of beans in the SOUTH pot is the most, return infinity
        else if the number of beans in the NORTH pot is the most, return negative infinity
        else overall if the number of beans in the NORTH and SOUTH are the same, return 0 
}


bool Game::move(Side s)
{
   if the current side is NORTH, have the north player choose a move
        if the chosen move returns -1, it means the game is over as the player has no more beans to sow, display the message to sweep the beans of the South’s side into their own pot, cout the ending game message, and return false
        else sow the board and return the recursive helper move function to check for captures and sow again moments 
   if the current side is SOUTH, do the same as above but for the south player 
 }


bool Game::helpMove(int& chooseHole, Side current, Side opp, Side& endSide, int& endHole, Player* player)
{
   if the chooseHole is -1, meaning that the player has no more moves to make
        if the opp is SOUTH, sweep all the beans on the south side into their pot, cout the end of game results message, and return false to indicate game is over 
        if the opp is NORTH, do the same as above but north side 
        
   else if check for a capture by ensuring that endHole is not 0, the current side and the ending side are the same, the current hole has 1 singular bean and the opposing hole has non-zero beans
        perform capture by moving both NORTH side and SOUTH side currentHole into the pot, display the message for a capture and return true to indicate full move finished
   else if check for a sow again move by seeing if you land in your own pot 
        display the board
        cout the message that the player gets another turn
        call the player’s chooseMove function
        sow the current board
        and return this helperfunction with the updated parameters  (should only be chooseHole)
   else return true to indicate a finished turn


    return true;
}


void Game::play()
{
   check to see first if neither player is interactive, if true, set pressEnter to true
   before playing, display the board
   set boolean variable over to false to create an “infinite loop”
   while over is false
        call the move function on SOUTH and set the return boolean value into moveStatus
        display the board after the move
        if the moveStatus is false, call the status function to set over to true
        if pressEnter is true, then have the user press Enter to continue the game
        call the move function on NORTH and set the return boolean value into moveStatus
        do the same as before
   once the game is over
        check to see if the hasWinner from status gives you true,
                if so, cout the winner
        else cout tie
}


Note:
the biggest struggle I had facing this project was creating the algorithm for the choosemove function for smart player. The two biggest issues I had was dealing with infinite recursion as I did not consider the case of a captured first which was causing the AI player to choose holes that did not exist. The second problem was that when I was doing my recursion, I would have my evaluation be on the side I was currently on, not the original side, so it always returned the max value, rather than the minimum and max value depending on which side we were on. The biggest issues I fear now are dealing with the time limit of 5 seconds and any other infinite recursion issues that could appear after testing. I noticed that if I had large games with a large amount of holes and a large amount of beans, the algorithm may take more time, possibly more than 5 seconds but it got an evaluated value at the end. Because of this, I used a stopping condition of depth > 4 so that at max it would search a depth of 5 predictions. UPDATE: I implemented a time limit instead but had to make it so that if it’s below 0.005 milliseconds, then stop rather than just 0 as it would cause infinite recursion. I am not too sure if the problem is that the algorithm is searching through every hole, but this is an issue that I was facing. 


test cases: 


test case 1:
Testing Smallberg’s board tests to ensure the board is correctly implemented 


#include "Board.h"
#include "Side.h"
#include <iostream>
#include <cassert>
using namespace std;


void doBoardTests()
{
        Board b(3, 2);
        assert(b.holes() == 3  &&  b.totalBeans() == 12  &&
            b.beans(SOUTH, POT) == 0  &&  b.beansInPlay(SOUTH) == 6);
        b.setBeans(SOUTH, 1, 1);
        b.moveToPot(SOUTH, 2, SOUTH);
        assert(b.totalBeans() == 11  &&  b.beans(SOUTH, 1) == 1  &&
                b.beans(SOUTH, 2) == 0  &&  b.beans(SOUTH, POT) == 2  &&
        b.beansInPlay(SOUTH) == 3);
        Side es;
        int eh;
        b.sow(SOUTH, 3, es, eh);
        assert(es == NORTH  &&  eh == 3  &&  b.beans(SOUTH, 3) == 0  &&
                b.beans(NORTH, 3) == 3  &&  b.beans(SOUTH, POT) == 3  &&
        b.beansInPlay(SOUTH) == 1  &&  b.beansInPlay(NORTH) == 7);
}


int main()
{
        doBoardTests();
        cout << "Passed all tests" << endl;
}


test case 2:
test case for player given by Smallberg , to ensure that the player implementation is correct


#include "Player.h"
#include "Board.h"
#include "Side.h"
#include <iostream>
#include <cassert>
using namespace std;


void doPlayerTests()
{
    HumanPlayer hp("Marge");
    assert(hp.name() == "Marge"  &&  hp.isInteractive());
    BadPlayer bp("Homer");
    assert(bp.name() == "Homer"  &&  !bp.isInteractive());
    SmartPlayer sp("Lisa");
    assert(sp.name() == "Lisa"  &&  !sp.isInteractive());
    Board b(3, 2);
    b.setBeans(SOUTH, 2, 0);
    cout << "=========" << endl;
    int n = hp.chooseMove(b, SOUTH);
    cout << "=========" << endl;
    assert(n == 1  ||  n == 3);
    n = bp.chooseMove(b, SOUTH);
    assert(n == 1  ||  n == 3);
    n = sp.chooseMove(b, SOUTH);
    assert(n == 1  ||  n == 3);
}


int main()
{
    doPlayerTests();
    cout << "Passed all tests" << endl;
}


test case 3
test case given by smallberg to ensure that the Game class was working and outputted the correct image 


#include "Game.h"
#include "Player.h"
#include "Board.h"
#include "Side.h"
#include <iostream>
#include <cassert>
using namespace std;


void doGameTests()
{
    BadPlayer bp1("Bart");
    BadPlayer bp2("Homer");
    Board b(3, 0);
    b.setBeans(SOUTH, 1, 2);
    b.setBeans(NORTH, 2, 1);
    b.setBeans(NORTH, 3, 2);
    Game g(b, &bp1, &bp2);
    bool over;
    bool hasWinner;
    Side winner;
        //    Homer
        //   0  1  2
        // 0         0
        //   2  0  0
        //    Bart
    g.status(over, hasWinner, winner);
    assert(!over && g.beans(NORTH, POT) == 0 && g.beans(SOUTH, POT) == 0 &&
    g.beans(NORTH, 1) == 0 && g.beans(NORTH, 2) == 1 && g.beans(NORTH, 3) == 2 &&
    g.beans(SOUTH, 1) == 2 && g.beans(SOUTH, 2) == 0 && g.beans(SOUTH, 3) == 0);


    g.move(SOUTH);
        //   0  1  0
        // 0         3
        //   0  1  0
    g.status(over, hasWinner, winner);
    assert(!over && g.beans(NORTH, POT) == 0 && g.beans(SOUTH, POT) == 3 &&
    g.beans(NORTH, 1) == 0 && g.beans(NORTH, 2) == 1 && g.beans(NORTH, 3) == 0 &&
    g.beans(SOUTH, 1) == 0 && g.beans(SOUTH, 2) == 1 && g.beans(SOUTH, 3) == 0);


    g.move(NORTH);
        //   1  0  0
        // 0         3
        //   0  1  0
    g.status(over, hasWinner, winner);
    assert(!over && g.beans(NORTH, POT) == 0 && g.beans(SOUTH, POT) == 3 &&
    g.beans(NORTH, 1) == 1 && g.beans(NORTH, 2) == 0 && g.beans(NORTH, 3) == 0 &&
    g.beans(SOUTH, 1) == 0 && g.beans(SOUTH, 2) == 1 && g.beans(SOUTH, 3) == 0);


    g.move(SOUTH);
        //   1  0  0
        // 0         3
        //   0  0  1
    g.status(over, hasWinner, winner);
    assert(!over && g.beans(NORTH, POT) == 0 && g.beans(SOUTH, POT) == 3 &&
    g.beans(NORTH, 1) == 1 && g.beans(NORTH, 2) == 0 && g.beans(NORTH, 3) == 0 &&
    g.beans(SOUTH, 1) == 0 && g.beans(SOUTH, 2) == 0 && g.beans(SOUTH, 3) == 1);


    cout << "move NORTH " << endl;
    g.move(NORTH);
        //   0  0  0
        // 1         4
        //   0  0  0
    g.status(over, hasWinner, winner);
    assert(over && g.beans(NORTH, POT) == 1 && g.beans(SOUTH, POT) == 4 &&
    g.beans(NORTH, 1) == 0 && g.beans(NORTH, 2) == 0 && g.beans(NORTH, 3) == 0 &&
    g.beans(SOUTH, 1) == 0 && g.beans(SOUTH, 2) == 0 && g.beans(SOUTH, 3) == 0);
    assert(hasWinner && winner == SOUTH);
}


int main()
{
    doGameTests();
    cout << "Passed all tests" << endl;
}


test case 4
testing a game between two AIs
* test for interactive player (pressing enter to see the next move)
* and testing the algorithm and ensuring that the AI picked at least a hole that was viable 
* made a large enough board to check for capture cases and sowing again cases 


#include <iostream>
#include "Board.h"
#include "Side.h"
#include "Player.h"
#include "Game.h"


void SmartVsSmart()
{
    SmartPlayer south_side("Tamaya");
    SmartPlayer north_side("Chelsey");
    Board play_board(5, 5);
    Game playGame(play_board, &south_side, &north_side);
    playGame.play();
}


int main()
{
    SmartVsSmart();
}


test case 5
* testing between two AIs of the smart and bad player, here the bad player would just choose the first hole that is viable
* the smart player would choose the best move according to its algorithm 
* board large enough to test for sowing again and captures 


#include <iostream>
#include "Board.h"
#include "Side.h"
#include "Player.h"
#include "Game.h"


void SmartVsBad()
{
    SmartPlayer south_side("Tamaya");
    BadPlayer north_side("Bad");
    Board play_board(5, 10);
    Game smartGame(play_board, &south_side, &north_side);
    smartGame.play();
}


int main()
{
    SmartVsBad();
}


test case 6:
* this was more of a qualitative test and observing the game display to ensure that the interaction between smart and human player would work properly, observe the displays to ensure that the function works 
* made sure invalid inputs by human were accounted for 


#include <iostream>
#include "Board.h"
#include "Side.h"
#include "Player.h"
#include "Game.h"


void SmartVsHuman()
{
    HumanPlayer south_side("Human");
    SmartPlayer north_side("AI");
    Board play_board(5, 5);
    Game lonely(play_board, &south_side, &north_side);
    lonely.play();
}


int main()
{
    SmartVsHuman();
}


test case 7:
this was more of a qualitative test and observing the game display to ensure that the interaction between smart and dumb player would work properly, observe the displays to ensure that the function works 


#include "Game.h"


#include <iostream>
#include "Board.h"
#include "Side.h"
#include "Player.h"
#include "Game.h"


void SmartVsDumb()
{
    HumanPlayer north_side("Human");
    BadPlayer south_side("AI");
    Board play_board(5, 5);
    Game lonelyD(play_board, &south_side, &north_side);
    lonelyD.play();
}


int main()
{
    SmartVsDumb();
}
#endif